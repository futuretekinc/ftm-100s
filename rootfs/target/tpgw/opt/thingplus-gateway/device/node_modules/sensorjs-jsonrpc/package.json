{
  "name": "sensorjs-jsonrpc",
  "description": "jsonrpc based sensor networks and drivers for sensorjs",
  "version": "0.0.1-1",
  "author": {
    "name": "daliworks",
    "email": "dev@daliworks.net"
  },
  "dependencies": {
    "log4js": "0.6",
    "lodash": "2.4.1",
    "getmac": "1.0.4",
    "jsonrpc-tcp": "git+https://github.com/daliworks/node-jsonrpc-tcp.git"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "grunt-simple-mocha": "0.4.x",
    "grunt": "~0.4.1",
    "sensorjs": "git+https://github.com/daliworks/sensorjs.git",
    "rewire": "^2.3.0"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:daliworks/sensorjs-jsonrpc"
  },
  "bugs": {
    "url": "https://github.com/daliworks/sensorjs-jsonrpc/issues"
  },
  "main": "index",
  "keywords": [
    "sensor",
    "sensor.js",
    "jsonrpc",
    "driver"
  ],
  "engines": {
    "node": ">=0.8.x"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/daliworks/sensorjs-jsonrpc/blob/msater/LICENSE"
    }
  ],
  "readme": "# sensorjs-jsonrpc\n\nSensorjs driver communicating with device over TCP in JSON-RPC format.\n[https://github.com/daliworks/sensorjs](https://github.com/daliworks/sensorjs)\n\n\n## Protocol btw Thing+Gateway <-> Device side.\n\n Note: \n  * json stream seperated with newline('\\n'); So that json message must not include newline in the middle.\n\n### discovery\n\n  * method: discover\n  * params: NONE\n  * result: array of dvice info\n    * device.sensors : array of sensor info\n      * id: sensor id, {device_id}-{uniq_id}\n      * type: sensor type\n      * notification: true if event type sensor(like onoff) or log value\n      \n--> \n```json\n{\"id\":1,\"method\":\"discover\",\"params\":[]}\n```\n<-- \n```json\n{\"id\":1,\"result\":[{\"deviceAddress\":\"0a0b0c0d0e00\",\"sensors\":[{\"id\":\"0a0b0c0d0e00-temperature-0\",\"type\":\"temperature\",\"name\":\"temp0\"},{\"id\":\"0a0b0c0d0e00-temperature-1\",\"type\":\"temperature\",\"name\":\"temp1\", \"notification\": true},{\"id\":\"0a0b0c0d0e00-humidity-0\",\"type\":\"humidity\",\"name\":\"humi0\"},{\"id\":\"0a0b0c0d0e00-onoff-0\",\"type\":\"onoff\",\"name\":\"di0\"},{\"id\":\"0a0b0c0d0e00-powerSwitch-0\",\"type\":\"powerSwitch\",\"name\":\"do0\"}]}],\"error\":null}\n```\n\n### get sensor value\n  * method: sensor.get\n  * params: sensorId\n\n--> \n```json\n{\"id\":2,\"method\":\"sensor.get\",\"params\":[\"0a0b0c0d0e00-temperature-0\"]}\n```\n<-- \n```json\n{\"id\":2,\"result\":{\"value\":5.63},\"error\":null}\n```\n\n### set atuator value\n  * method: sensor.set\n  * params: sensorId, command, options\n\n--> \n```json\n{\"id\":3,\"method\":\"sensor.set\",\"params\":[\"0a0b0c0d0e00-powerSwitch-0\",\"on\",null]}\n```\n<-- \n```json\n{\"id\":3,\"result\":\"success\",\"error\":null}\n```\n\n### set sensor value notification (on change)\n  * method: sensor.setNotification\n  * params: sensorId\n\n#### event type sensor case\n--> \n```json\n{\"id\":5,\"method\":\"sensor.setNotification\",\"params\":[\"0a0b0c0d0e00-onoff-0\"]}\n```\n<-- \n```json\n{\"id\":5,\"result\":\"success\",\"error\":null}\n```\n<-- \n```json\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-onoff-0\",{value: 1}]}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-onoff-0\",{value: 1}]}\n```\n\n#### log value case(```notification: true``` at the discovered sensor info)\n--> \n```json\n{\"id\":5,\"method\":\"sensor.setNotification\",\"params\":[\"0a0b0c0d0e00-temperature-1\"]}\n```\n<-- \n```json\n{\"id\":5,\"result\":\"success\",\"error\":null}\n```\n<-- \n```json\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-temperature-1\",{time: 1426582038144, value: 24.0}]}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-temperature-1\",{time: 1426582038144, value: 24.0}]}\n```\n\n## Device side code example\n\n  * Nodejs version ```example/jsonrpc-nodejs/```\n```\n$ cd example/jsonrpc-nodejs/\n$ node server.js\n```\n  * C version ```example/jsonrpc-c/```\n     * Note: only discover and sensor.get are implemented as example\n```\n$ cd example/jsonrpc-c/; make;\n$ ./example/server\n```\n\n## how to test\n\n### run your code\n```\n$ cd example/jsonrpc-nodejs; node server.js\n```\n\nNote: to trace all message transmitions: uncomment below lines at ```node_modules/jsonrpc-tcp/lib/jsonrpc-tcp/connection.js```\n  *  console.log('RECV: ' + data.trim());\n  *  console.log('XMIT: ' + JSON.stringify(obj));\n\n\n### run test\n```\n$ npm install --force # force options since some modules require arm-linux env.\n$ grunt # http://gruntjs.com/getting-started\n```\n\n----\n## LICENSE \n```\n/*\n * Copyright (c) 2014, Daliworks. All rights reserved.\n *\n * Reproduction and/or distribution in source and binary forms \n * without the written consent of Daliworks, Inc. is prohibited.\n *\n */\n ```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/daliworks/sensorjs-jsonrpc",
  "_id": "sensorjs-jsonrpc@0.0.1-1",
  "_shasum": "841391a13092e41f346e0923c835c68c1652d20f",
  "_resolved": "https://github.com/daliworks/sensorjs-jsonrpc.git#5f48955251e5c381eafb51bf2c490058e1e37a4e",
  "_from": "sensorjs-jsonrpc@git+https://github.com/daliworks/sensorjs-jsonrpc.git"
}
