'use strict';
var util = require('util');

var SensorLib = require('../index'),
    Actuator = SensorLib.Actuator,
    rpcHelper = require('../rpcHelper'),
    logger = Actuator.getLogger();

function JsonrpcActuator(sensorInfo, options) {
  Actuator.call(this, sensorInfo, options);

  this.shortId = this.id.substr(this.id.indexOf('-')+1);

  rpcHelper.init();
}

JsonrpcActuator.properties = {
  supportedNetworks: ['jsonrpc'],
  dataTypes: {jsonrpcDo: ['powerSwitch']},
  discoverable: true,
  addressable: false,
  maxInstances: 5,
  idTemplate: '{gatewayId}-{deviceAddress}-{type}-{sequence}',
  models: ['jsonrpcDo'],
  commands: ['on', 'off'],
  category: 'actuator'
};

util.inherits(JsonrpcActuator, Actuator);

function sendCommand(id, cmd, cb) {
  rpcHelper.call('sensor.set', id, cmd, null, cb);
}
//FIXME: add duration option using timer
JsonrpcActuator.prototype.on = function (options, cb) {
  var self = this;
  sendCommand(self.shortId, 'on', function (err, result) {
    return cb && cb(err, result);
  });
};

JsonrpcActuator.prototype.off = function (options, cb) {
  var self = this;
  sendCommand(self.shortId, 'off', function (err, result) {
    return cb && cb(err, result);
  });
};

JsonrpcActuator.prototype._clear = function () {
  return;
};

module.exports = JsonrpcActuator;
