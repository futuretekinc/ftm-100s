'use strict';
var util = require('util');

var SensorLib = require('../../index'),
    helper = require('../../helper'),
    Sensor = SensorLib.Sensor,
    logger = Sensor.getLogger();


function PowerManagerSensor(sensorInfo, options) {
  var self = this;
  Sensor.call(this, sensorInfo, options);

  if (sensorInfo.model) {
    this.model = sensorInfo.model;
  }
  if (sensorInfo.device) {
    this.meterMac = sensorInfo.device.address && sensorInfo.device.address.toUpperCase();
  }

  if (!this.meterMac) {
    logger.fatal('[PowerManagerSensor] no meterMac', sensorInfo);
    //FIXME: throw error
    return;
  }

  helper.init(function (err) {
    if (err) {
      logger.error('[PowerManagerSensor] init fail', self.meterMac, err);
    }
    helper.initClient(self.meterMac, function(err) {
      if (err) {
        logger.error('[PowerManagerSensor] initClient fail', self.meterMac, err);
      }
    });
  });
  logger.debug('PowerManagerSensor', sensorInfo);
}

PowerManagerSensor.properties = {
  supportedNetworks: ['powerManager'],
  dataTypes: ['power'],
  onChange: false,
  discoverable: false,
  addressable: true,
  recommendedInterval: 30000,
  maxInstances: 1,
  idTemplate: '{model}-{address}',
  models: ['B310WS'],
  category: 'sensor'
};

util.inherits(PowerManagerSensor, Sensor);

PowerManagerSensor.prototype._get = function () {
  var self = this, rtn;

  helper.getData(self.meterMac, function (err, data) {
    if (err) {
      rtn = {status: 'error', id : self.id, message: err.toString()}; 
      logger.error('[PowerManagerSensor] getData err', err.toString());
    } else if (!data) {
      rtn = {status: 'error', id : self.id, message: 'no data'}; 
      logger.error('[PowerManagerSensor] getData err', 'no data');
    } else {
      // Wh -> kWh
      rtn = {status: 'ok', id : self.id, result: {'power': data.power / 1000}}; 
      logger.info('[PowerManagerSensor]' + self.meterMac, 'data=', data);
    }
    self.emit('data', rtn);
    return;
  });
};

PowerManagerSensor.prototype._clear = function () {
  var self = this;
  logger.warn('[PowerManagerSensor] _clear', this.ipAddr);
  helper.finClient(self.meterMac);
  return;
};

module.exports = PowerManagerSensor;
