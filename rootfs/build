#!/bin/sh
PRODUCT=ftm-100u
KERNEL_VERSION=2.6.36
COMMON_PATH=$PWD/target/common/$KERNEL_VERSION
ROOT=$PWD/_rootfs
BUSYBOX_PATH=$PWD/apps/busybox-1.22.1
IPTABLES_PATH=$PWD/apps/iptables-1.4.21
#BASE_PATH=/opt/Cortina/toolchain/toolchain-arm_gcc-4.5.1+l_uClibc-0.9.32_eabi/arm-openwrt-linux-gnueabi
#LIBS="ld-linux.so.3 libcrypt.so.1 libm.so.6 libc.so.6 libdl.so.2"
BASE_PATH=/opt/CORTINA/toolchain/toolchain-arm_gcc-4.5.1+l_uClibc-0.9.32_eabi/arm-openwrt-linux-uclibcgnueabi
LIB_VERSION=-0.9.32-rc2-git
LIBS="ld-uClibc.so.0 libcrypt.so libm.so libc.so.0 libdl.so"
LIB_PATH="/lib /usr/lib"
CROSS_COMPILE=arm-openwrt-linux-uclibcgnueabi-

if [ -d "tmp" ]
then
	sudo rm -rf "tmp"
fi

chdir()
{
	cd	$ROOT/$1

	echo "The current location is $PWD"
}

mklink()
{
	for TARGET in $@
	do
		ln -s /bin/busybox $TARGET
	done
}

mkdev()
{
	if [ ! -d "$ROOT/dev" ]
	then
		mkdir	$ROOT/dev
	fi

	sudo mknod $ROOT/dev/$1 $2 $3 $4
}


if [ -d "$ROOT" ]
then
	rm -rf $ROOT
fi

mkdir $ROOT

cp -raf $COMMON_PATH/* $ROOT/
cp -raf $PWD/target/$PRODUCT/* $ROOT/
(

	chdir	

	mkdir -p bin boot sbin lib mnt opt proc root sys tmp
	mkdir -p dev dev/pts dev/net
	mkdir -p etc etc/init.d 
	mkdir -p usr usr/bin usr/sbin usr/lib usr/share
	mkdir -p var
)


# /bin configuration
(
	chdir	bin
)

# /dev configuration
(
	chdir	dev
)

# /lib configuration
(
	chdir	lib
)

# /sbin configuration
(
	chdir	sbin
)

# install busybox
(
	cd $BUSYBOX_PATH

#	make ARCH=arm CROSS_COMPILE=$CROSS_COMPILE
#	make ARCH=arm CROSS_COMPILE=$CORSS_COMPILE install CONFIG_PREFIX=$ROOT
)

# install iptables
(
	cd $IPTABLES_PATH
#	make
#	make install DESTDIR=$ROOT
)

(
	case "$PRODUCT" in
		ftm-100s)
			cp -rf target/ftm-100s/* $ROOT
			cp -rf apps/target/* $ROOT
			if [ ! -e $ROOT/overlay ]
			then
				mkdir $ROOT/overlay
			fi
		;;
		ftm-100s-tp)
			cp -rf target/ftm-100s-tp/* $ROOT
			cp -rf apps/target/* $ROOT
			if [ ! -e $ROOT/overlay ]
			then
				mkdir $ROOT/overlay
			fi
		;;
		ftm-100u)
			cp -rf target/ftm-100u/* $ROOT
			cp -rf apps/target/* $ROOT
			if [ ! -e $ROOT/overlay ]
			then
				mkdir $ROOT/overlay
			fi
		;;
		ftm-100u-tp)
			cp -rf target/ftm-100u-tp/* $ROOT
			cp -rf apps/target/* $ROOT
			cp -rf target/ftm-100u-ddns/* $ROOT
			if [ ! -e $ROOT/overlay ]
			then
				mkdir $ROOT/overlay
			fi
		;;
		ftm-100t)
			cp -rf target/ftm-100t/* $ROOT
			cp -rf apps/target/* $ROOT
			if [ ! -e $ROOT/overlay ]
			then
				mkdir $ROOT/overlay
			fi
		;;
		ftm-100t-tp)
			cp -rf target/ftm-100t-tp/* $ROOT
			cp -rf apps/target/* $ROOT
			if [ ! -e $ROOT/overlay ]
			then
				mkdir $ROOT/overlay
			fi
		;;

#		ftm-100s-tp)
#			cp -rf target/ftm-100s/* $ROOT
#			cp -rf apps/target/* $ROOT
#			cp -rf target/tpgw/* $ROOT
#			if [ ! -e $ROOT/overlay ]
#			then
#				mkdir $ROOT/overlay
#			fi
#
#		;;
		ftm-100s-origin)
			cp -rf target/origin/2.6.36/* $ROOT
			cp -rf apps/target/* $ROOT
		;;
	esac
)

#~/Work/cortina/openwrt-2.6.36/staging_dir/host/bin/mksquashfs4 $ROOT root.squashfs \
#	-nopad -noappend -root-owned -comp lzma -Xpreset 9 -Xe -Xlc 0 -Xlp 2 -Xpb 2 -b 256k -processors 8
mksquashfs $ROOT root.squashfs \
	-nopad -noappend -root-owned -b 256k -processors 8

dd if=root.squashfs of=tmpfile.0 bs=4k conv=sync
echo -ne '\xde\xad\xc0\xde' >> tmpfile.0
dd if=tmpfile.0 of=tmpfile.1 bs=4k conv=sync
echo -ne '\xde\xad\xc0\xde' >> tmpfile.1
dd if=tmpfile.1 of=tmpfile.2 bs=64k conv=sync
echo -ne '\xde\xad\xc0\xde' >> tmpfile.2
dd if=tmpfile.2 of=root.squashfs bs=64k conv=sync
echo -ne '\xde\xad\xc0\xde' >> root.squashfs

rm tmpfile.*

mkimage -n 'RootFS-1.0.2-FTM-100U' -A arm -O linux -T filesystem -C gzip -d root.squashfs rootfs.img

